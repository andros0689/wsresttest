apiVersion: template.openshift.io/v1
kind: Template
labels:
  template: avianca-spring-boot-camel
metadata:
  annotations:
    description: Spring Boot and Camel for Avianca. This demonstrates how you
      can use Apache Camel with Spring Boot on OpenShift.
    iconClass: icon-rh-integration
    openshift.io/display-name: Avianca Integration with Camel and Spring Boot
    openshift.io/provider-display-name: Avianca.
    tags: java,springboot,fis,jboss-fuse
    version: "1"
  creationTimestamp: 2019-06-11T21:29:03Z
  name: avianca-spring-boot-camel
  namespace: #{NAMESPACE}#
  resourceVersion: "2164"
  selfLink: /apis/template.openshift.io/v1/namespaces/openshift/templates/avianca-spring-boot-camel
objects:
- apiVersion: image.openshift.io/v1
  kind: ImageStream
  metadata:
    generation: 1
    name: #{APPLICATION_NAME}#
  spec:
    lookupPolicy:
      local: true
- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    annotations:
    labels:
      app: #{APPLICATION_NAME}#
      group: com.avianca.esb
      provider: fabric8
      version: #{APPLICATION_VERSION}#
    name: #{APPLICATION_NAME}#
  spec:
    replicas: 1
    revisionHistoryLimit: 2
    selector:
      app: #{APPLICATION_NAME}#
      group: com.avianca.esb
      provider: fabric8
    strategy:
      activeDeadlineSeconds: 21600
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 3600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        annotations:
        labels:
          app: #{APPLICATION_NAME}#
          group: com.avianca.esb
          pci-compliance: "#{PCI_COMPLIANCE}#"
          provider: fabric8
          version: #{APPLICATION_VERSION}#
      spec:
        containers:
        - env:
          - name: LOG4J_FORMAT_MSG_NO_LOOKUPS
            value: "true"
          - name: CONFIG_LOCATION
            value: #{CONFIG_LOCATION}#
          - name: SPRING_CONFIG_LOCATION
            value: #{SPRING_CONFIG_LOCATION}#
          - name: TZ
            value: #{TZ}#
          - name: KEYVAULT_CLIENT_ID
            value: #{KEYVAULT_CLIENT_ID}#
          - name: KEYVAULT_CLIENT_KEY
            value: #{KEYVAULT_CLIENT_KEY}#
          - name: KEYVAULT_ENABLED
            value: "#{KEYVAULT_ENABLED}#"
          - name: KEYVAULT_CLIENT_TENANT_ID
            value: #{KEYVAULT_CLIENT_TENANT_ID}#
          - name: KEYVAULT_URI
            value: #{KEYVAULT_URI}#
          - name: SERVICENAME_CONSUMER_REST
            value: #{SERVICENAME_CONSUMER_REST}#
          - name: APIPATH_CONSUMER_REST
            value: #{APIPATH_CONSUMER_REST}#
          - name: APIBASEPATH_CONSUMER_REST
            value: #{APIBASEPATH_CONSUMER_REST}#
          - name: APICONTEXTPATH_CONSUMER_REST
            value: #{APICONTEXTPATH_CONSUMER_REST}#
          - name: CONTEXT_CONSUMER_REST
            value: #{CONTEXT_CONSUMER_REST}#
          - name: HOST_PRODUCER_REST
            value: #{HOST_PRODUCER_REST}#
          - name: CONTEXT_PRODUCER_REST
            value: #{CONTEXT_PRODUCER_REST}#
          - name: SERVICE_PRODUCER_REST
            value: #{SERVICE_PRODUCER_REST}#
          - name: METHOD_PRODUCER_REST
            value: #{METHOD_PRODUCER_REST}#
          - name: TYPE_PRODUCER_REST
            value: #{TYPE_PRODUCER_REST}#
          imagePullPolicy: IfNotPresent
          livenessProbe:
            tcpSocket:
              port: 8080
            initialDelaySeconds: 60
          name: spring-boot
          ports:
          - containerPort: 8080
            name: http
            protocol: TCP
          - containerPort: 9779
            name: prometheus
            protocol: TCP
          - containerPort: 8778
            name: jolokia
            protocol: TCP
          readinessProbe:
            tcpSocket:
              port: 8080
            initialDelaySeconds: 60
          resources:
            limits:
              cpu: "#{CPU_LIMIT}#"
              memory: #{MEMORY_LIMIT}#
            requests:
              cpu: "#{CPU_REQUEST}#"
              memory: #{MEMORY_REQUEST}#
          securityContext:
            privileged: false
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /data
            name: volume-#{APPLICATION_NAME}#
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            name: #{APPLICATION_NAME}#-config
          name: volume-#{APPLICATION_NAME}#
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - spring-boot
        from:
          kind: ImageStreamTag
          name: #{APPLICATION_NAME}#:latest
        lastTriggeredImage: docker-registry.default.svc:5000/#{NAMESPACE}#/#{APPLICATION_NAME}#:latest
      type: ImageChange
    details:
      causes:
      - type: ConfigChange
      message: config change
    latestVersion: 5
    observedGeneration: 10
    readyReplicas: 1
    unavailableReplicas: 0
    updatedReplicas: 1
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
    labels:
      app: #{APPLICATION_NAME}#
      expose: "true"
      group: com.avianca.esb
      provider: fabric8
      version: #{APPLICATION_VERSION}#
    name: #{APPLICATION_NAME}#
  spec:
    ports:
    - name: http
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      app: #{APPLICATION_NAME}#
      group: com.avianca.esb
      provider: fabric8
    sessionAffinity: None
    type: ClusterIP
- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    annotations:
    labels:
      app: #{APPLICATION_NAME}#
      expose: "true"
      group: com.avianca.esb
      provider: fabric8
      version: #{APPLICATION_VERSION}#
    name: #{APPLICATION_NAME}#
  spec:
    host: #{APPLICATION_NAME}#-#{NAMESPACE}#.#{INGRESS}#.#{CLUSTERNAME}#.#{BASEDOMAIN}#
    port:
      targetPort: 8080
    tls:
      termination: edge
      insecureEdgeTerminationPolicy: None
    to:
      kind: Service
      name: #{APPLICATION_NAME}#
      weight: 100
    wildcardPolicy: None
parameters:
- description: The name for the application.
  displayName: Application Name
  name: APPLICATION_NAME
- description: The version for the application.
  displayName: Application Version
  name: APPLICATION_VERSION
- description: The namespace where you put your project
  displayName: Namespace 
  name: NAMESPACE
- description: TimeZone
  displayName: TimeZone
  name: TZ
- description: The host notification, save the value for host where is deployed the notification mail.
  displayName: Host Notification
  name: HOST_NOTIFICATION
- description: The port notification, save the value for port where is deployed the notification mail.
  displayName: Port Notification
  name: PORT_NOTIFICATION
- description: The queue name for notification.
  displayName: Queue Name
  name: QUEUE_NOTIFICATION
- description: The ServiceName will be publish to be consumed by another contexts.
  displayName: ServiceName 
  name: SERVICENAME_CONSUMER_REST
- description: The apipath will be used to show and use the apipath.
  displayName: API Path
  name: APIPATH_CONSUMER_REST
- description: The apibasepath will be used to show and use the apibasepath.
  displayName: API Base Path
  name: APIBASEPATH_CONSUMER_REST
- description: The serviceNameID will be used to put it in the context to know what Id is invoked.
  displayName: ServiceNameID
  name: APICONTEXTPATH_CONSUMER_REST
- description: The context that will be used to consume the local service.
  displayName: Context
  name: CONTEXT_CONSUMER_REST
- description: The Host where the service will be exposed to be consume by us.
  displayName: Host Producer Rest 
  name: HOST_PRODUCER_REST
- description: The Context save the data will be used to call the context.
  displayName: Context Producer Rest
  name: CONTEXT_PRODUCER_REST
- description: The Service producer Rest has the service that will be invoke by our consumer.
  displayName: Service Producer Rest
  name: SERVICE_PRODUCER_REST
- description: The method will be invoke by our service.
  displayName: Method Producer Rest
  name: METHOD_PRODUCER_REST
- description: The Type describe the kind of data will be send to the producer.
  displayName: Type Producer Rest
  name: TYPE_PRODUCER_REST
